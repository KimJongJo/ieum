<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.member">

	<select id="checkId" parameterType="String" resultType="member">
		select * from member where id = #{userId};
	</select>
	
	<insert id="normalJoin" parameterType="member">
		insert into member 
		(id, username, birth_date, password, gender, u_tel, email, created_at, user_type, nickname, u_address, diary_private, warning_count, state_code, file_no)
		 values(#{id}, #{username}, #{birthDate}, #{password}, #{gender}, #{uTel}, #{email}, NOW() , 'USER'
		 , #{nickname}, #{uAddress}, #{diaryPrivate}, 0, 1, #{fileNo})
	</insert>
	
	<insert id="managerJoin" parameterType="member">
		insert into member
		(id, username, birth_date, password, gender, u_tel, email, created_at, user_type, major, h_no, state_code, file_no)
		values(#{id}, #{username}, #{birthDate}, #{password}, #{gender}, #{uTel}, #{email}, NOW(), #{userType}, #{major}, #{hNo}, 1, #{fileNo})
	</insert>
	
	<select id="findId" parameterType="String" resultType="Map">
		select id as userId, username as userName, user_type as userType from member where email = #{email}
	</select>
	
	<select id="CheckIdAndEmail" parameterType="Map" resultType="Map">
		select * from member where id = #{userId} and email = #{email}
	</select>
	
	<update id="changePw" parameterType="Map">
		update member set password = #{password} where id = #{userId}
	</update>
	
	<select id="beforePw" parameterType="String" resultType="String">
		select password from member where id = #{userId}
	</select>
	
	<select id="useEmail" parameterType="String" resultType="member">
		select * from member where email = #{email}
	</select>
	
	<select id="existId" parameterType="String" resultType="Map">
		select u_no as userNo, password from member where id = #{userId}
	</select>
	
	<!-- 뭐였지? -->
	<select id="selectByNickName" parameterType="int" resultType="member">
		select nickname, u_no from member where u_no = #{u_no}
	</select>
	
	<!-- 정보 가져오기 -->
	<select id="selectProfileInfo" parameterType="int" resultType="member">
		select username, nickname, id, u_address, email, birth_date, gender, diary_private, u_tel
		from member
		where u_no = #{uNo}
	</select>
	
	<!-- 회원 정보 수정하기 전에 정보 가져오기 -->
	<select id="selectMemberWithProfile" parameterType="int" resultType="memberProfile">
		select m.u_no, m.id, m.username, m.nickname, m.u_address, m.email, m.u_tel, m.diary_private,
        	  f.file_no, f.file_name, f.file_path, f.file_category
    	from member m
    	left JOIN file f
		ON m.file_no = f.file_no
		where m.u_no = #{uNo}
	</select>
	
	<!-- 회원 정보 수정 -->
	<update id="updateProfile" parameterType="member">
		update member set 
			nickname = #{nickName}, email = #{email}, id = #{id}, u_tel = #{uTel}, u_address = #{uAddress},
			 diary_private = #{diaryPrivate} 
			<if test="fileNo != null">
                , file_no = #{fileNo}
            </if>
        where u_no = #{uNo}
	</update>	
	
	<!-- 비번 업데이트 -->
	<update id="updatePass" parameterType="member">
		update member set
			password = #{password}
		where u_no = #{uNo}
	</update>
	<!-- 비밀번호 찾기 -->
	<select id="selectId" parameterType="int" resultType="member">
		select password from member where u_no = #{uNo}
	</select>
	
	<!-- 프로필 업데이트 -->
	<update id="updateMemberFileNo" parameterType="member">
	    update member
	    set file_no = #{fileNo}
	    where u_no = #{uNo}
	</update>
	
	<!-- 의사 수  -->
	<select id="docCnt" parameterType="Integer" resultType="Integer">
	select count(*)
	from member m
	where h_no=#{hNo} and state_code=1
	</select>
	
	<!-- 의사 리스트 정렬  -->
	<select id="docList" parameterType="Integer" resultType="member">
	select * ,count(r.r_no) as resCount
	from member m
	left join reservation r
	using (h_no)
	where m.h_no=#{hNo} and m.state_code=1
	group by m.u_no, m.h_no
	order by resCount desc
	</select>
	

	<insert id="kakaoSignUp" parameterType="member" useGeneratedKeys="true" keyProperty="uNo">
		insert into member (id, username, birth_date, gender, u_tel, email, created_at, user_type, nickname, u_address, diary_private, warning_count, state_code, file_no)
		 values(#{id}, #{username}, #{birthDate}, #{gender}, #{uTel}, #{email}, NOW(), 'USER', #{nickname}, #{uAddress}, #{diaryPrivate}, 0, 1, #{fileNo})
	</insert>
	
	<select id="checkNaverEmail" parameterType="String" resultType="member">
		select * from member where email = #{email}
  </select>

	<!-- 의사선택 -->
	<select id="selectDoc" parameterType="integer" resultType="Integer">
	select *
	from member
	where u_no=#{uNo} and state_code=1
	</select>
	
	<!-- 일반 계정이랑 소셜 계정 병합 -->
	<update id="socialUpdate" parameterType="map">
		update member set social_id = #{id} where email = #{email}
	</update>
	
	<select id="memberCount" parameterType="Integer" resultType="Integer">
		select count(*) from member where user_type = 'USER'
		<choose>
        <!-- 전체 회원 (0) -->
        <when test="_parameter  == 0">
            <!-- 아무 조건도 안 넣음 -->
        </when>
        <!-- 정상(1), 활동정지(2), 탈퇴(3) -->
        <otherwise>
            AND state_code = #{_parameter}
        </otherwise>
    	</choose>
	</select>
	
	<select id="selectMembers" parameterType="Map" resultType="member">
		select * from member where user_type = 'USER'
		<choose>
        <!-- 전체 회원 (0) -->
        <when test="state == 0">
            <!-- 아무 조건도 안 넣음 -->
        </when>
        <!-- 정상(1), 활동정지(2), 탈퇴(3) -->
        <otherwise>
            AND state_code = #{state}
        </otherwise>
    	</choose>
		order by ${sortValue} ${sort}
    	LIMIT #{pageSize} OFFSET #{offset}
	</select>
	
	<!-- 검색어 유저 수 -->
	<select id="memberListByKeyword" parameterType="Map" resultType="Integer">
		select count(*) from member
		where user_type = 'USER'
	 	<choose>
        <!-- 전체 회원 (0) -->
        <when test="state == 0">
            <!-- 아무 조건도 안 넣음 -->
        </when>
        <!-- 정상(1), 활동정지(2), 탈퇴(3) -->
        <otherwise>
            AND state_code = #{state}
        </otherwise>
    	</choose>
		and (username like concat ('%', #{keyword}, '%')
			or nickname like concat ('%', #{keyword}, '%')
			or email like concat ('%', #{keyword}, '%'))
	</select>
	
	<!-- 검색어 유저 리스트 -->
	<select id="selectUserListByKeyword" parameterType="Map" resultType="member">
		select * from member
	    where user_type = 'USER'
	     <choose>
        <!-- 전체 회원 (0) -->
        <when test="state == 0">
            <!-- 아무 조건도 안 넣음 -->
        </when>
        <!-- 정상(1), 활동정지(2), 탈퇴(3) -->
        <otherwise>
            AND state_code = #{state}
        </otherwise>
    	</choose>
	    and (username like concat ('%', #{keyword}, '%')
			or nickname like concat ('%', #{keyword}, '%')
			or email like concat ('%', #{keyword}, '%'))
	    order by ${sortValue} ${sort}
	    limit #{pageSize} offset #{offset}
	</select>
	
	<select id="memberInfo" parameterType="Integer" resultType="member">
		select * from member where u_no = #{_parameter}
	</select>
	
	<update id="userState" parameterType="Map">
		update member set state_code = #{stateCode} where u_no = #{uNo}
	</update>
	
	<select id="memberInfoAndFile" parameterType="Integer" resultType="memberFile">
		SELECT m.u_no, m.username, CONCAT(f.file_path,'/', f.file_name) AS imgFile, m.email, m.created_at, m.warning_count, m.state_code
		FROM member m
		JOIN file f USING(file_no)
		WHERE u_no = #{_parameter};
	</select>
	
</mapper>	