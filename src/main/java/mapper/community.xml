<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.community">
	<!-- 커뮤니티 작성 -->
	<insert id="insertCommunity" parameterType="dto.CommunityDto" useGeneratedKeys="true" keyProperty="commuNo">
	    insert into community (u_no, commu_title, commu_content, commu_views, empathy, commu_created, commu_declaration, category_no, commu_comment)
	    values (#{uNo}, #{commuTitle}, #{commuContent}, 0, 0, now(), 0, #{categoryNo}, 0)
	</insert>
	
	<!-- 특정 커뮤니티 찾기 -->
	<select id="selectByNo" parameterType="int" resultType="community">
	    SELECT
	        commu_no     AS commuNo,
	        u_no         AS uNo,
	        commu_title  AS commuTitle,
	        commu_content AS commuContent,
	        commu_views  AS commuViews,
	        empathy,
	        commu_created AS commuCreated,
	        commu_declaration AS commuDeclaration,
	        category_no  AS categoryNo,
	        commu_comment AS commuComment
	    FROM community
	    WHERE commu_no = #{commuNo}
	</select>

	<!-- 자신이 작성한 커뮤니티 불러오기 -->
	<select id="selectMyCommunityList" parameterType="int" resultType="myCommunity">
        SELECT
            c.commu_no, c.commu_title, c.commu_content, c.commu_created, c.empathy, c.commu_comment, c.commu_views, cg.category_name, m.nickname
        FROM community c
        INNER JOIN commu_category cg ON c.category_no = cg.category_no
        INNER JOIN member m ON c.u_no = m.u_no
        WHERE c.u_no = #{uNo}
        ORDER BY c.commu_created DESC
    </select>

	<!-- 자신이 작성한 가장 최근 커뮤니티 1개 가져오기 -->
	<select id="selectMyCommunityOne" parameterType="int" resultType="myCommunity">
	    SELECT c.commu_no, c.commu_title, c.commu_content, c.commu_created, c.empathy, c.commu_comment, c.commu_views, cg.category_name, m.nickname
        FROM community c
        INNER JOIN commu_category cg ON c.category_no = cg.category_no
        INNER JOIN member m ON c.u_no = m.u_no
        WHERE c.u_no = #{uNo}
        ORDER BY c.commu_created DESC
	    LIMIT 1
	</select>

	
    
    <!-- 자신이 좋아요한 여부 -->
    <select id="selectLikedCommunityList" parameterType="int" resultType="myCommunity">
	    select c.commu_no, c.commu_title, c.commu_content, c.commu_created, c.empathy, c.commu_comment, c.commu_views, cg.category_name, m.nickname
	    from community c
	    inner join commu_category cg on c.category_no = cg.category_no
	    inner join member m ON c.u_no = m.u_no
	    inner join commu_like cl on c.commu_no = cl.commu_no
	    where cl.u_no = #{uNo}
	    order by c.commu_created DESC
	    LIMIT #{row}, 10
	</select>
	
	
	 <!-- 자신이 좋아요한 여부 한개만 가져오기 -->
    <select id="selectLikedCommunityOne" parameterType="int" resultType="myCommunity">
	    select c.commu_no, c.commu_title, c.commu_content, c.commu_created, c.empathy, c.commu_comment, c.commu_views, cg.category_name, m.nickname
	    from community c
	    inner join commu_category cg on c.category_no = cg.category_no
	    inner join member m ON c.u_no = m.u_no
	    inner join commu_like cl on c.commu_no = cl.commu_no
	    where cl.u_no = #{uNo}
	    order by c.commu_created DESC
	    limit 1
	</select>
	

    <!-- 모든 커뮤니티 불러오기 -->
    <select id="selectAllCommunityList" resultType="allCommunity">
    	SELECT
            c.commu_no, c.commu_title, c.commu_content, c.commu_created, c.empathy, c.commu_comment, c.commu_views, cg.category_name, m.nickname
        FROM community c
        INNER JOIN commu_category cg ON c.category_no = cg.category_no
        INNER JOIN member m ON c.u_no = m.u_no
        ORDER BY c.commu_no DESC  		
    
    </select>
<!-- pes -->
    <!-- 키워드 커뮤니티 불러오기 - 메인검색용 -->
    <select id="searchCommuity" parameterType="map" resultType="allCommunity">
    	SELECT commu_no, commu_title, commu_content, commu_created
        FROM community
        <if test="keyword != null and keyword != ''">
		WHERE (commu_title LIKE CONCAT('%', #{keyword}, '%') OR commu_content LIKE CONCAT('%', #{keyword}, '%')	)
		</if>
        ORDER BY commu_no DESC  		
    	LIMIT 2
    </select>
     <!-- 키워드 커뮤니티 개수 불러오기 - 메인검색용 -->
    <select id="searchCommuCnt" parameterType="map" resultType="Integer">
    	SELECT COUNT(*)
        FROM community
        <if test="keyword != null and keyword != ''">
		WHERE (commu_title LIKE CONCAT('%', #{keyword}, '%') OR commu_content LIKE CONCAT('%', #{keyword}, '%')	)
		</if>
    </select>
	       
	<!-- 게시글 삭제 -->
	<delete id="deleteCommunity" parameterType="int">
        delete from community WHERE commu_no = #{commuNo}
    </delete>
	  
    <update id="updateCommunity" parameterType="myCommunity">
    	update community set
    		commu_title = #{commuTitle}, commu_content = #{commuContent},category_no = #{categoryNo}
    	where commu_no = #{commuNo} 
    </update>
    
    <!-- 조회수 증가 쿼리 -->
    <update id="updateViews" parameterType="int">
        update community
        set commu_views = commu_views + 1
        where commu_no = #{commuNo}
    </update>
    
    
    <!-- 공감 테이블에 commu_no가 있다면 community테이블의 commu_no에 해당하는 모든 정보 가져오기 -->
    <select id="selectCommuWithLike" parameterType="int" resultType="community">
	    select c.*
		from community c
		join commu_like cl on c.commu_no = cl.commu_no;
	</select>
	<!-- 페이징 처리할 쿼리 (20개 가져오기)-->
	<select id="selectList" parameterType="map" resultType="allCommunity">
	    SELECT
            c.commu_no, c.commu_title, c.commu_content, c.commu_created, c.empathy, c.commu_comment, c.commu_views, cg.category_name, m.nickname
        FROM community c
        INNER JOIN commu_category cg ON c.category_no = cg.category_no
        INNER JOIN member m ON c.u_no = m.u_no
        
        <where>
        <if test="category != null and category != 'all'">
            AND cg.category_name = #{category}
        </if>
    </where>
     <choose>
        <when test="sort == 'latest'">
            ORDER BY c.commu_no DESC
        </when>
        <when test="sort == 'empathy'">
            ORDER BY c.empathy DESC, c.commu_no DESC
        </when>
        <when test="sort == 'view'">
            ORDER BY c.commu_views DESC, c.commu_no DESC
        </when>
        <otherwise>
            ORDER BY c.commu_no DESC
        </otherwise>
    </choose>
        LIMIT #{row}, 20
	</select>	
	<!-- 커뮤니티 저장된것 다 가져오기 (갯수 파악함)-->
	<select id="selectCount" resultType="Integer">
		select count(*)
	    from community
	    INNER JOIN commu_category cg ON c.category_no = cg.category_no
    <where>
        <if test="category != null and category != 'all'">
            AND cg.category_name = #{category}
        </if>
    </where>
	</select>
	<!-- 페이징 처리할 쿼리 (10개 가져오기)-->
	<select id="selectMyList" parameterType="map" resultType="myCommunity">
	    SELECT
            c.commu_no, c.commu_title, c.commu_content, c.commu_created, c.empathy, c.commu_comment, c.commu_views, cg.category_name, m.nickname
        FROM community c
        INNER JOIN commu_category cg ON c.category_no = cg.category_no
        INNER JOIN member m ON c.u_no = m.u_no
        WHERE c.u_no = #{uNo}
        ORDER BY c.commu_no DESC 
        LIMIT #{row}, 10
	</select>
	
	<select id="selectMyCount" resultType="Integer">
		select count(*)
	    from community
	    where u_no = #{uNo}
	</select>
	
	
	<select id="listByPageAndSort" resultType="allCommunity" parameterType="map">
	    SELECT *
	    FROM all_community
	    <choose>
	        <when test="sort == 'latest'">
	            ORDER BY commu_created DESC
	        </when>
	        <when test="sort == 'empathy'">
	            ORDER BY empathy_count DESC
	        </when>
	        <when test="sort == 'view'">
	            ORDER BY view_count DESC
	        </when>
	        <otherwise>
	            ORDER BY commu_created DESC
	        </otherwise>
	    </choose>
	    LIMIT #{start}, #{pageSize}
  </select>
	
	
	<select id="getCommunityAuthorNo" parameterType="int" resultType="int">
		select u_no from community where commu_no = #{commuNo}
	</select>	
	
	
	
	
	 <!-- 모든 게시글의 commu_comment 컬럼 업데이트 -->
    <update id="updateCommentCount">
        UPDATE community c
        SET c.commu_comment = (
            SELECT COUNT(*)
            FROM comment cm
            WHERE cm.commu_no = c.commu_no
        )
    </update>
    
    
    
    <select id="selectLikedCount" parameterType="int" resultType="int">
	    SELECT COUNT(*) 
	    FROM commu_like cl
	    JOIN community c ON cl.commu_no = c.commu_no
	    WHERE cl.u_no = #{uNo}
	</select>
	
</mapper>	